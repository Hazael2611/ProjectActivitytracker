import tkinter as tk
from tkinter import ttk, messagebox
import customtkinter as ctk
from CTkMessagebox import CTkMessagebox
from customtkinter import CTkButton, CTk
from tkcalendar import DateEntry
from db import activitiesEnter
from log import open_log
from db import historialview
from db import stats_view
from db import profiles
from db import age_sex
from db import savedatap
from db import imc_weight
from db import mentalmood
from db import graphprogress
import json
from PIL import Image, ImageTk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import matplotlib.dates as mdates
import numpy as np
import random
import pandas as pd
import seaborn as sns
from datetime import datetime


# main code for tkinter interface and its logic
def showmain_window(user_id, name): #usar user_name, solo se usaria para los labels de welcome
    ctk.set_appearance_mode("Dark") 
    ctk.set_default_color_theme("dark-blue")
    #function to hide frames and just show entry frame for activities and data that will be recolected to mysql
    def forms():
        mainFrame.pack_forget()
        activitiprogressframe.pack_forget()
        profile_bu.place_forget()
        mental_bu.place_forget()
        formsframe.pack(fill="both",expand=True)
        buildforms()#call the function to show the fields and register all records

    #function to hide all frames except for the frame that will shown the table that was connected with sql
    def treeviewh(user_id):
        mainFrame.pack_forget()
        activitiprogressframe.pack_forget()
        profile_bu.place_forget()
        mental_bu.place_forget()
        tableframe.pack(fill="both",expand=True)
        historial(user_id)
    
    #function to hide all frames except for the frame that will shown the graphs about de progress 
    def graphview(user_id):
        mainFrame.pack_forget()
        activitiprogressframe.pack_forget()
        profile_bu.place_forget()
        mental_bu.place_forget()
        graphsframe.pack(fill="both",expand=True)
        stats(user_id)

    #function to display json tips, info provides from "https://pmc.ncbi.nlm.nih.gov/articles/PMC6536904/"
    #Next steps will be with google (gemini) api for specific tips generated by IA usign recolected data
    def tips(): 
        tipswindow=ctk.CTkToplevel(mainwindow)
        tipswindow.iconbitmap(r"C:\Users\2928703\Documents\Proposal\tips.ico")
        tipswindow.geometry("250x300")
        tipswindow.title("Did you know?")
    
        with open("tips.json","r", encoding="utf-8") as t:
            data=json.load(t)
        
        tip=random.choice(data["tips"])
        note=data["notes"]
      
        tip_content=f"{tip["tip"]} \n{tip["Description"]}"
        tip_label=ctk.CTkLabel(tipswindow, text=tip_content, wraplength=200, justify="left")
        tip_label.pack(padx=8, pady=(5,15))

        notecont=f"{note["note"]} \n{note["Description"]}"
        note_label=ctk.CTkLabel(tipswindow, text=notecont, wraplength=200, justify="left")
        note_label.pack(padx=8, pady=(5,15))
        tipswindow.mainloop()

    #function to hide frames execept for profiles frame to record personal data       
    def profileview(name, user_id):
        mainFrame.pack_forget()
        activitiprogressframe.pack_forget()
        profile_bu.place_forget()
        mental_bu.place_forget()
        profileframe.pack(fill="both",expand=True)
        profile(name, user_id)

    def progress_graph(frame, user_id):
        dates, minutes = graphprogress(user_id)
        if dates:
            for widget in frame.winfo_children():
                widget.destroy()

            sns.set(style="darkgrid", context="talk") 

            fig, ax = plt.subplots(figsize=(7, 4), dpi=100)
            sns.lineplot(x=dates, y=minutes, ax=ax, color="blue")
            sns.scatterplot(x=dates, y=minutes, ax=ax, color='darkblue', s=70)
            
            ax.set_title("Minutes of activity by day")
            ax.set_ylabel("Minutes")
            ax.tick_params(axis='x', rotation=45)
            fig.tight_layout()

            canvas = FigureCanvasTkAgg(fig, master=frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill="both", expand=True)
        else:
            label=ctk.CTkLabel(frame, text="No data to show this month yet",text_color="grey", font=("Arial",15,"bold"))
            label.pack(pady=45)
    
    #main tkinter window
    mainwindow=ctk.CTk()
    mainwindow.title(f"Welcome to StepByStep")
    mainwindow.geometry("750x600") #size of the main window
    mainwindow.iconbitmap(r"C:\Users\2928703\Documents\Proposal\mainico.ico")

    #button to get and show the tips from a json, in next updates it will be replaced by an api with IA to get more specific tips
    tip_bu=ctk.CTkButton(mainwindow, text="ðŸ’¡Tips",corner_radius=20 ,command=tips)
    tip_bu.place(relx=0.01, rely=0.01, anchor="nw")

    #profile and mental health button to record the data
    profile_bu=ctk.CTkButton(mainwindow, text="ðŸ‘¤Profile",corner_radius=20 ,command=lambda: profileview(name, user_id))
    profile_bu.place(relx=0.99, rely=0.01, anchor="ne")

    mental_bu=ctk.CTkButton(mainwindow, text="ðŸ§ Mental mood", corner_radius=20,command=lambda: mentalmoodform(user_id))
    mental_bu.place(relx=0.99, rely=0.07, anchor="ne")

#modificar lo del name a user_name para que sea mas personalizado
    welcomeLabel = ctk.CTkLabel(mainwindow, text=f"Welcome back {name}, User APP ID: {user_id}", font=("Arial",20,"bold"))
    welcomeLabel.pack(side=ctk.TOP,pady=20)

    #Frame that contains the Record activities entries
    mainFrame = ctk.CTkFrame(mainwindow, fg_color="transparent")
    mainFrame.pack(side=ctk.TOP,fill="both", expand=True)
    #button to record the daily activities that call froms function
    entryb=ctk.CTkButton(mainFrame, text="ðŸ’ªEnter your activity", width=100,height=40,corner_radius=20,command=lambda: forms())
    #entryb.place(relx=0.2, rely=0.5,anchor=ctk.CENTER)
    entryb.grid(row=0,column=0, padx=30,pady=45)

    
    histo_button=ctk.CTkButton(mainFrame, text="ðŸ“‹View your records", width=100,height=40,corner_radius=20,command= lambda: treeviewh(user_id))#call treeviewh function
    #histo_button.place(relx=0.5, rely=0.5,anchor=ctk.CENTER)
    histo_button.grid(row=0,column=1, padx=30,pady=45)

    # show graphs (progress and strip)
    stats_button=ctk.CTkButton(mainFrame, text="ðŸ“ŠView your stats", width=100,height=40,corner_radius=20,command= lambda: graphview(user_id))# call the function to close the main window info
    #stats_button.place(relx=0.8, rely=0.5,anchor=ctk.CENTER)
    stats_button.grid(row=0,column=2, padx=30,pady=45)


#add a graph about the minutes done and the activities overtime like sccatter and lineplot maybe with streak but it would be a problem for overworking
    activitiprogressframe=ctk.CTkFrame(mainwindow, fg_color="transparent")
    activitiprogressframe.pack(side=ctk.BOTTOM, pady=50)

    progress_graph(activitiprogressframe, user_id)

    #creation of the exit button to close the mainwindow and return to the log window
    exit_bu=ctk.CTkButton(mainwindow, text="Exit", corner_radius=20,width=80,fg_color="#880000", hover_color="#aa0000",command=lambda: [mainwindow.destroy(),open_log(showmain_window)])
    exit_bu.place(relx=0.99, rely=0.99, anchor="se")
   
    
    #creation of secondary frames that show the forms, table, graphs and profile
    formsframe= ctk.CTkFrame(mainwindow)
    tableframe= ctk.CTkFrame(mainwindow)
    graphsframe=ctk.CTkFrame(mainwindow)
    profileframe=ctk.CTkFrame(mainwindow)

#function to record al the personal data in MYSQL DB
    def profile(name, user_id):
        for i in profileframe.winfo_children():
            i.destroy()
        #Forms creations with the personal data and constrains about physicaly activity recomendation by OMS
        welcomeLabel=ctk.CTkLabel(profileframe, text=f"{name}'s profile")
        welcomeLabel.grid(row=0, column=2, pady=10)
        sex_label=ctk.CTkLabel(profileframe, text="Sex: ").grid(row=1, column=1, pady=10)
        sex_op=ctk.CTkComboBox(profileframe, values=["M","F"], state="readonly")
        sex_op.grid(row=1, column=2, pady=10)
        birth_label=ctk.CTkLabel(profileframe, text="Birthday: ").grid(row=1, column=3, pady=10)
        birth=DateEntry(profileframe, date_pattern="yyyy-mm-dd")
        birth.grid(row=1, column=4, pady=10)
        data=stats_view(user_id)
        minu_total=0
        for i in data:
            if i[2]=="Low":
                minu_total+=float(i[1])*0.5
            if i[2]=="Moderate":
                minu_total+=float(i[1])
            if i[2]=="High":
                minu_total+=float(i[1])*2

        if minu_total<400:
            activityStatus=ctk.StringVar(value="Sedentary")
        elif minu_total>400 and minu_total<650:
            activityStatus=ctk.StringVar(value="Lightly active")
        elif minu_total>650 and minu_total<1200:
            activityStatus=ctk.StringVar(value="Active")
        elif minu_total>1200:
            activityStatus=ctk.StringVar(value="Very Active")

        height_label=ctk.CTkLabel(profileframe, text="Enter your height: ").grid(row=2, column=1, padx=15, pady=15)
        height=ctk.CTkEntry(profileframe)
        height.grid(row=2, column=2, pady=15)
        height_op=ctk.CTkComboBox(profileframe, values=["cm","ft"],state="readonly")
        height_op.grid(row=2, column=3, pady=15)

        weight_l=ctk.CTkLabel(profileframe, text="Enter your weight: ").grid(row=3, column=1, padx=15, pady=8)
        weight=ctk.CTkEntry(profileframe)
        weight.grid(row=3, column=2,pady=8)
        weight_op=ctk.CTkComboBox(profileframe, values=["kg","lbs"], state="readonly")
        weight_op.grid(row=3,column=3,pady=8)

        statusLabel=ctk.CTkLabel(profileframe, text="This month your monthly physical activity is: ").grid(row=4, column=1, padx=15, pady=8)
        actstatus=ctk.CTkLabel(profileframe, textvariable=activityStatus).grid(row=4, column=2,pady=8)

        imc_status=ctk.StringVar(value="0")
        imc_label = ctk.CTkLabel(profileframe, text="BMI: ").grid(row=5, column=1, padx=15, pady=8)
        imc_slabel = ctk.CTkLabel(profileframe, textvariable=imc_status).grid(row=5,column=2, pady=8)

        kcal_status=ctk.StringVar(value="0")
        kcal_label=ctk.CTkLabel(profileframe, text="Recommended daily intake of Kcal: ").grid(row=6, column=1, padx=15, pady=8)
        kcal_slabel=ctk.CTkLabel(profileframe, textvariable=kcal_status).grid(row=6, column=2, pady=8)
        #button to show bmi and weight progress over time
        wgraph=ctk.CTkButton(profileframe, text="View personal progress", corner_radius=20,command=lambda:personalgraphs(user_id)).grid(row=7, column=2, pady=10)    
        #logic for recovery the last records by the user to save and show in some fields of profile window
        datauser_saved=savedatap(user_id)
        if datauser_saved:
            birth.set_date(datauser_saved[0][4])
            sex_op.set(datauser_saved[0][3])
            imc_status.set(datauser_saved[0][1])
            kcal_status.set(datauser_saved[0][2])
        #function to validate each input and send to MYSQL
        def validate(activityStatus):
            #Data entry validation and transformation
            birthd=birth.get_date()
            sex_selec=sex_op.get()

            today=datetime.today()
            age=today.year-birthd.year - ((today.month, today.day)<(birthd.month, birthd.day))

            age_sex(user_id,age,sex_selec, birthd)
            try:
                heightvalue = float(height.get().strip())
                weightvalue= float(weight.get().strip())
            except ValueError:
                CTkMessagebox(title="Error", message="Height and Weight must be numbers", icon="cancel", option_1="Retry")
                return

            if heightvalue <= 0 or weightvalue <= 0:
                CTkMessagebox(title="Error", message="Height and Weight must be positive values", icon="cancel", option_1="Retry")
                return
            if not birthd or not sex_selec or not height_op.get() or not weight_op.get():
                CTkMessagebox(title="Error", message="Complete the information to continue", icon="cancel", option_1="Retry")
                return

            
            #to transform if some one put ft or lbs
            if height_op.get() == "ft":
                heightvalue *= 30.48
            if weight_op.get() == "lbs":
                weightvalue *= 0.4536
            
            # Calculus of personal stats
            #weight(kg)/height(m)**2
            imc_val = weightvalue / (heightvalue / 100) ** 2
            imc_status.set(round(imc_val, 2))

            #to calculte kcal
            print(f"data type of age:", type(age))
            if sex_selec=="M":
                kcal1=(10*weightvalue)+(6.25*heightvalue)-(5*age)+5
            else:
                kcal1=(10*weightvalue)+(6.25*heightvalue)-(5*age)-161
            
            if activityStatus=="Sedentary":
                actfactor=1.2
            elif activityStatus=="Lightly active":
                actfactor=1.375
            elif activityStatus=="Active":
                actfactor=1.55
            else:
                actfactor=1.725
            kcal=actfactor*kcal1
            kcal_status.set(kcal)
            #to save data
            save(user_id, heightvalue, weightvalue, activityStatus.get(), imc_val, kcal)

        def save(user_id, height, weight, activity_status, imc_val, kcal):
            profiles(user_id, height, weight, activity_status, imc_val, kcal)
            CTkMessagebox(title="Success", message="Data was recorded", icon="check", option_1="ok")
            profileframe.pack_forget()
            mainFrame.pack(side=ctk.TOP, fill="both", expand=True)
            activitiprogressframe.pack(side=ctk.BOTTOM,pady=50)
            profile_bu.place(relx=0.99, rely=0.01, anchor="ne")
            mental_bu.place(relx=0.99, rely=0.07, anchor="ne")


        def personalgraphs(user_id):
            pgraphframe = ctk.CTkToplevel(profileframe)
            pgraphframe.iconbitmap(r"C:\Users\2928703\Documents\Proposal\mainico.ico")
            pgraphframe.title("Personal progress (BMI & weight)")

            dataprogress = imc_weight(user_id)
            if not dataprogress:
                ctk.CTkLabel(pgraphframe, text="No data to show").pack()
                return

            hist_weight = []
            hist_imc = []
            time = []

            for i in dataprogress:
                hist_weight.append(i[1])
                hist_imc.append(i[2])
                time.append(i[3]) 

            dfp = pd.DataFrame({
                "time": time,
                "hist_weight": hist_weight,
                "hist_imc": hist_imc
            })

            sns.set(style="darkgrid", context="talk") 

            fig, ax = plt.subplots(figsize=(5, 5), dpi=100)
            sns.lineplot(data=dfp, x="time", y="hist_weight", ax=ax, color="blue")
            sns.scatterplot(data=dfp, x="time", y="hist_weight", ax=ax, color='darkblue', s=70)

            for i in range(len(dfp)):
                ax.text(dfp["time"][i], float(dfp["hist_weight"][i]) + 0.2, f"{dfp['hist_weight'][i]:.1f}", ha='center', fontsize=8)

            ax.set_title("Weight Progress Over Time")
            ax.set_xlabel("Date")
            ax.set_ylabel("Weight (kg)")
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
            ax.tick_params(axis='x', rotation=45)
            fig.tight_layout()
            canvas = FigureCanvasTkAgg(fig, master=pgraphframe)
            canvas.get_tk_widget().grid(row=0, column=0, padx=30, pady=10)

            fig2, ax2 = plt.subplots(figsize=(5, 5), dpi=100)
            sns.lineplot(data=dfp, x="time", y="hist_imc", ax=ax2, color="blue")
            sns.scatterplot(data=dfp, x="time", y="hist_imc", ax=ax2, color="darkblue", s=70)
            for i in range(len(dfp)):
                ax2.text(dfp["time"][i], float(dfp["hist_imc"][i]) + 0.2, f"{dfp['hist_imc'][i]:.1f}", ha='center', fontsize=8)
            ax2.set_title("BMI Progress Over Time")
            ax2.set_xlabel("Date")
            ax2.set_ylabel("% BMI")
            ax2.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
            ax2.tick_params(axis='x', rotation=45)
            fig2.tight_layout()
            canvas2 = FigureCanvasTkAgg(fig2, master=pgraphframe)
            canvas2.get_tk_widget().grid(row=0, column=1, padx=30, pady=10)

            canvas.draw()
            canvas2.draw()

            close_button = ctk.CTkButton(pgraphframe, text="Close", command=pgraphframe.destroy)
            close_button.grid(row=1, column=0, columnspan=2, pady=10)

        note_label=ctk.CTkLabel(profileframe, text="NOTE: BMI is not an exact measurement and is biased, consult your nutritionist for advanced guide").grid(row=8, column=1, columnspan=3,pady=30, padx=20)
        save_button=ctk.CTkButton(profileframe, text="Save", corner_radius=20,command=lambda:validate(activityStatus)).place(relx=0.9, rely=0.95, anchor="se")
        cancel_b=ctk.CTkButton(profileframe, text="Cancel", corner_radius=20,command=lambda:[profileframe.pack_forget(),mainFrame.pack(side=ctk.TOP,fill="both",expand=True),
        activitiprogressframe.pack(side=ctk.BOTTOM,pady=50), profile_bu.place(relx=0.99, rely=0.01, anchor="ne"),mental_bu.place(relx=0.99, rely=0.07, anchor="ne")])
        cancel_b.place(relx=0.05, rely=0.95, anchor="sw")
    
#function to show table with the query
    def historial(user_id):
        #this for destroy elements in the frame, i just want the empty frame to start 
        for i in tableframe.winfo_children():
            i.destroy()
        #style of treeview of tkinter to be like customtkinter 
        style=ttk.Style()
        style.theme_use("clam")
        style.configure("Treeview", background="#333333",foreground="white",rowheight=50)
        style.configure("Treeview.Heading", background="#333333",foreground="white", font='bold')
        #creation of a table with Treeview library and register the columns and heading
        tree=ttk.Treeview(tableframe, columns=("Exercise", "Duration_min", "Intensity", "Date"),show="headings")
        tree.heading("Exercise", text="Activity")
        tree.heading("Duration_min", text="Duration(min)")
        tree.heading("Intensity", text="Intensity")
        tree.heading("Date", text="Date")
        #change the default widht of each column
        tree.column("Exercise", width=230)
        tree.column("Duration_min", width=230)
        tree.column("Intensity", width=230)
        tree.column("Date", width=230)
        #call to the function historialviwe from db.py to extract the information by the user_id who has logged in
        acthisto=historialview(user_id) 
        tree.grid(row=1, column=0, columnspan=2, pady=30, padx=60)

        def show_table(resultados):
            #Function to insert the data extracted and inserted in the new table created with treeview
            for resultado in resultados:
                tree.insert("", tk.END, values=resultado)
        
        show_table(acthisto)

        #creation of scrollbar
        tree_scroll= ctk.CTkScrollbar(tableframe, command=tree.yview) #Helps to the user to navigate down and uo (vertical) across the table
        tree_scroll.grid(row=1, column=3, sticky="ns")
        tree["yscrollcommand"]= tree_scroll.set

        #creation of close button to close the table frame and unpack the mainwindow with the 5 button (add entrys, view histo, stats, exit and tips)
        close_button=ctk.CTkButton(tableframe, text="Close", corner_radius=20,command=lambda:[tableframe.pack_forget(),mainFrame.pack(side=ctk.TOP,fill="both",expand=True),
        activitiprogressframe.pack(side=ctk.BOTTOM,pady=50),profile_bu.place(relx=0.99, rely=0.01, anchor="ne"),mental_bu.place(relx=0.99, rely=0.07, anchor="ne")])
        close_button.grid(row=2, column=0, columnspan=2)

#function to show the graphs as status or progress in current month
    def stats(user_id):
        for i in graphsframe.winfo_children():
            i.destroy()
        data=stats_view(user_id)
        close_button=ctk.CTkButton(graphsframe, text="Close", corner_radius=20,command=lambda:[graphsframe.pack_forget(),mainFrame.pack(side=ctk.TOP,fill="both",expand=True),
        activitiprogressframe.pack(side=ctk.BOTTOM,pady=50),profile_bu.place(relx=0.99, rely=0.01, anchor="ne"),mental_bu.place(relx=0.99, rely=0.07, anchor="ne")])
        close_button.place(relx=0.4,rely=0.9)
    
        if not data:
            ctk.CTkLabel(graphsframe, text="No data to show").pack()
            return
        exer=[]
        minu=[]
        intensi=[]
        minu_total=0
        for i in data:
            exer.append(i[0])
            minu.append(i[1])
            intensi.append(i[2])
            #According to the intensity is recommended more or less minutes per wek (moderate:150, high:75 min)
            if i[2]=="Low":
                minu_total+=float(i[1])*0.5
            if i[2]=="Moderate":
                minu_total+=float(i[1])
            if i[2]=="High":
                minu_total+=float(i[1])*2
        #creation of dataframe, requiered for stripplot seaborn
        df=pd.DataFrame({
            "exer":exer,
            "minu":minu,
            "intensi":intensi
        })

        fig,ax = plt.subplots(figsize=(5,5), dpi=100)
        #stripplot, x will be minutes done foe each activity, y will be each activity and categories will be intensity (color)
        #dodge separete the record that has the same x but different category, avoid overlaps
        sns.stripplot(data=df, x="minu", y="exer", hue="intensi", dodge=True, ax=ax, size=8) 
        ax.set_title("Monthly activity tracker per intensity")
        ax.set_xlabel("Duration(min)")
        ax.set_ylabel("Activities")
        ax.legend(title="Intensity", loc="upper right")
        plt.tight_layout()
        canvas = FigureCanvasTkAgg(fig, master=graphsframe)
        canvas.get_tk_widget().grid(row=0, column=0, padx=30,pady=10)
        
        #progress
        minu_goal=600
        percent=min(minu_total/minu_goal,1.0)
        fig2, ax2 = plt.subplots(figsize=(5,5), subplot_kw=dict(polar=True))
        ax2.barh(1,float(percent)*(np.pi*2), left=0, height=1, color="lightblue") 
        ax2.set_title("Monthly activity time progress")
        ax2.set_yticklabels([])
        ax2.set_xticklabels([])
        ax2.set_theta_zero_location('N')
        ax2.set_theta_direction(-1)
        
        if minu_goal-minu_total<0:
            fig2.text(0.3,0.05,f"Minutes done: {minu_total}, remaining: 0", fontsize=9)
        else:
            fig2.text(0.3,0.05,f"Minutes done: {minu_total}, remaining: {minu_goal-minu_total}", fontsize=9)
        
        canvas2 = FigureCanvasTkAgg(fig2, master=graphsframe)
        canvas2.get_tk_widget().grid(row=0, column=1, padx=30, pady=10)
        canvas.draw()
        canvas2.draw()
        if minu_goal-minu_total<0:
            CTkMessagebox(title="Congratulations",message="CONGRATS, \n you reached your monthly goal", icon=r"C:\Users\2928703\Documents\html y css\Primeros ejercicios\target.ico", option_1="Ok")
            pass
    
#function to create the forms that will be sent to the DB in MySQL (acttracker-activities)
    def buildforms():
        for i in formsframe.winfo_children():
            i.destroy()
        act=ctk.CTkLabel(formsframe, text="Record your activity").pack(pady=20, padx=20)
        #Entry field to record type of exercise
        kact=ctk.CTkLabel(formsframe, text="Type of exercise").pack( pady=5, padx=20)
        kact_entry=ctk.CTkEntry(formsframe)
        kact_entry.pack(pady=8)
        
        #Entry field to record the duration (min)
        time=ctk.CTkLabel(formsframe, text="Duration (min): ").pack(pady=5, padx=20)
        time_entry=ctk.CTkEntry(formsframe)
        time_entry.pack(pady=8)

        #Entry field to record the intensity using a combobox
        intensityL = ctk.CTkLabel(formsframe, text="Intensity: ").pack(pady=5, padx=20)
        intensity_entry=ctk.CTkComboBox(formsframe, values=["Low", "Moderate","High"],  state="readonly")
        #readonly option doesn't allow the user to register anything outside the options
        intensity_entry.pack(pady=8)

        #Creation of save button logic to send all the data enter by the user to de DB
        def save():
            #extract the data from entry and combobox fields in the forms frame
            kexer=kact_entry.get().strip().lower().capitalize()
            dura_entry=time_entry.get().strip()
            inten=intensity_entry.get()
            #cases to validate the enter to not get a invalid type of data
            
            if kexer.isdigit() or not kexer or not dura_entry.isdigit() or int(dura_entry)==0 or not inten:
                CTkMessagebox(title="Error",message="Complete all the fields to continue", icon="cancel", option_1="Cancel", option_2="Retry")
                return
            #call activitiesEnter function from db.py to insert the values in each column
            activitiesEnter(user_id,kexer,dura_entry,inten)
            CTkMessagebox(title="Success",message="Activity was recorded", icon="check", option_1="ok")
            formsframe.pack_forget()
            #if the records were inserted the forms frame close and show the main window
            mainFrame.pack(side=ctk.TOP,fill="both", expand=True)
            activitiprogressframe.pack(side=ctk.BOTTOM,pady=50)
            progress_graph(activitiprogressframe, user_id)
            profile_bu.place(relx=0.99, rely=0.01, anchor="ne")
            mental_bu.place(relx=0.99, rely=0.07, anchor="ne")
        #creation of the save and cancel button in the forms frame to save or cancel the opetation and return to mainwindow
        
        save_button=ctk.CTkButton(formsframe, text="Save", corner_radius=20,command=save).pack(side="right",expand=True, pady=20)
        cancel_b=ctk.CTkButton(formsframe, text="Cancel", corner_radius=20,command=lambda:[formsframe.pack_forget(),mainFrame.pack(side=ctk.TOP,fill="both",expand=True),
        activitiprogressframe.pack(side=ctk.BOTTOM,pady=50),profile_bu.place(relx=0.99, rely=0.01, anchor="ne"),mental_bu.place(relx=0.99, rely=0.07, anchor="ne")])
        cancel_b.pack(side="left",expand=True, pady=5)

#function to create mental health or mood forms, in next versions this data and the sum of total minutes will be send to a machine learning model
#to predict if the user will stop to do exercise
    def mentalmoodform(user_id):
        #cration of mental frame and hide all the rest
        mainFrame.pack_forget()
        activitiprogressframe.pack_forget()
        mental_bu.place_forget()
        profile_bu.place_forget()
        mentalframe=ctk.CTkFrame(mainwindow)
        mentalframe.pack(fill="both",expand=True)

        #mental forms (label and combobox) for each question
        motiv_label=ctk.CTkLabel(mentalframe, text="How motivated do you feel (1-10)? ").place(relx=0.3, rely=0.2, anchor=ctk.CENTER)
        motiv_entry=ctk.CTkComboBox(mentalframe, values=["1","2","3","4","5","6","7","8","9","10"],state="readonly")
        motiv_entry.place(relx=0.7, rely=0.2, anchor=ctk.CENTER)

        stress_label=ctk.CTkLabel(mentalframe, text="How stressed do you feel (1-10)? ").place(relx=0.3, rely=0.3, anchor=ctk.CENTER)
        stress_entry=ctk.CTkComboBox(mentalframe, values=["1","2","3","4","5","6","7","8","9","10"],state="readonly")
        stress_entry.place(relx=0.7, rely=0.3, anchor=ctk.CENTER)

        dream_label=ctk.CTkLabel(mentalframe, text="How has your sleep quality been (1-10)? ").place(relx=0.3, rely=0.4, anchor=ctk.CENTER)
        dream_entry=ctk.CTkComboBox(mentalframe, values=["1","2","3","4","5","6","7","8","9","10"],state="readonly")
        dream_entry.place(relx=0.7, rely=0.4, anchor=ctk.CENTER)

        activityc_label=ctk.CTkLabel(mentalframe, text="How satisfied do you feel today with your physical activity (1-10)? ").place(relx=0.3, rely=0.5, anchor=ctk.CENTER)
        activityc_entry=ctk.CTkComboBox(mentalframe, values=["1","2","3","4","5","6","7","8","9","10"],state="readonly")
        activityc_entry.place(relx=0.7, rely=0.5, anchor=ctk.CENTER)

        diffic_label=ctk.CTkLabel(mentalframe, text="Have you had difficulty staying motivated? ").place(relx=0.3, rely=0.6, anchor=ctk.CENTER)
        diffic_entry=ctk.CTkComboBox(mentalframe, values=["Yes","No"],state="readonly")
        diffic_entry.place(relx=0.7, rely=0.6, anchor=ctk.CENTER)
        #save, validate the inputs and send to MySQL
        def save():
            motiva=motiv_entry.get()
            stress= stress_entry.get()
            sleep= dream_entry.get()
            satisfied=activityc_entry.get()
            difficult=diffic_entry.get()
           
            if not motiva or not stress or not sleep or not satisfied or not difficult:
                CTkMessagebox(title="Error",message="Complete all the fields to continue", icon="cancel", option_1="Retry")
                return
            #call mentalmood funciton from db.py to insert the values in each column
            mentalmood(user_id,motiva,stress,sleep,satisfied,difficult)
            CTkMessagebox(title="Success",message="Mental mood was recorded", icon="check", option_1="ok")
            mentalframe.pack_forget()
            #if the records were inserted the forms frame close and show the main window with the 5 buttons or option 
            mainFrame.pack(side=ctk.TOP,fill="both", expand=True)
            activitiprogressframe.pack(side=ctk.BOTTOM,pady=50)
            mental_bu.place(relx=0.99, rely=0.07, anchor="ne")
        
        
        save_button=ctk.CTkButton(mentalframe, text="Save", corner_radius=20,command=save).place(relx=0.75, rely=0.8)
        cancel_b=ctk.CTkButton(mentalframe, text="Cancel", corner_radius=20,command=lambda:[mentalframe.pack_forget(),mainFrame.pack(side=ctk.TOP,fill="both",expand=True),
        activitiprogressframe.pack(side=ctk.BOTTOM,pady=50),mental_bu.place(relx=0.99, rely=0.07, anchor="ne"), profile_bu.place(relx=0.99, rely=0.01, anchor="ne")])
        cancel_b.place(relx=0.15, rely=0.8)


    mainwindow.mainloop()